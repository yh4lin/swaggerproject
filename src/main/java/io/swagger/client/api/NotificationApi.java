/*
 * API ServiceOrder
 * Request the instantiation of a service  A Service Order is a type of order which can be used to describe a group of operations on service â€“ one service order item per service. An action at the level of the service order item describe the operation to be done on a service (add, terminate for example). The service order is triggered from the BSS system in charge of the product order management to ONAP that will manage the service fulfillment.  List of available subscription for serviceOrdering notifications, see /hub resources for more information:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification - ServiceOrderItemStateChangeNotification  
 *
 * OpenAPI spec version: 4.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Notification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient apiClient;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for notificationCreate
     * @param body  (required)
     * @param target  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationCreateCall(Notification body, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (target != null)
        localVarHeaderParams.put("Target", apiClient.parameterToString(target));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationCreateValidateBeforeCall(Notification body, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling notificationCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = notificationCreateCall(body, target, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * NBI will send notification to this operation provided by subscribers
     * Notification structure depends of the eventType:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification  &#x60;&#x60;&#x60; {   \&quot;eventId\&quot;: \&quot;string\&quot;,   \&quot;eventDate\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;,   \&quot;eventType\&quot;: \&quot;string\&quot;,   \&quot;event\&quot;: {     \&quot;id\&quot;: \&quot;string\&quot;,     \&quot;href\&quot;: \&quot;string\&quot;,     \&quot;externalId\&quot;: \&quot;string\&quot;,     \&quot;state\&quot;: \&quot;acknowledged\&quot;,     \&quot;orderDate\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;,     \&quot;completionDateTime\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;   } } &#x60;&#x60;&#x60;  - ServiceOrderItemStateChangeNotification  &#x60;&#x60;&#x60; {   \&quot;eventId\&quot;: \&quot;string\&quot;,   \&quot;eventDate\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,   \&quot;eventType\&quot;: \&quot;string\&quot;,   \&quot;event\&quot;: {     \&quot;id\&quot;: \&quot;string\&quot;,     \&quot;href\&quot;: \&quot;string\&quot;,     \&quot;externalId\&quot;: \&quot;string\&quot;,     \&quot;state\&quot;: \&quot;acknowledged\&quot;,     \&quot;orderDate\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,     \&quot;completionDateTime\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,     \&quot;orderItem\&quot;: [       {         \&quot;id\&quot;: \&quot;string\&quot;,         \&quot;action\&quot;: \&quot;add\&quot;,         \&quot;state\&quot;: \&quot;acknowledged\&quot;,         \&quot;service\&quot;: {           \&quot;id\&quot;: \&quot;string\&quot;,           \&quot;href\&quot;: \&quot;string\&quot;,           \&quot;name\&quot;: \&quot;string\&quot;,           \&quot;serviceState\&quot;: \&quot;string\&quot;,           \&quot;serviceCharacteristic\&quot;: [             {               \&quot;name\&quot;: \&quot;string\&quot;,               \&quot;valueType\&quot;: \&quot;string\&quot;,               \&quot;value\&quot;: {                 \&quot;serviceCharacteristicValue\&quot;: \&quot;string\&quot;               }             }           ],           \&quot;serviceRelationship\&quot;: [             {               \&quot;type\&quot;: \&quot;reliesOn\&quot;             }           ],           \&quot;relatedParty\&quot;: [             {               \&quot;id\&quot;: \&quot;string\&quot;,               \&quot;href\&quot;: \&quot;string\&quot;,               \&quot;role\&quot;: \&quot;string\&quot;,               \&quot;name\&quot;: \&quot;string\&quot;,               \&quot;@referredType\&quot;: \&quot;string\&quot;             }           ],           \&quot;serviceSpecification\&quot;: {             \&quot;id\&quot;: \&quot;string\&quot;,             \&quot;href\&quot;: \&quot;string\&quot;,             \&quot;name\&quot;: \&quot;string\&quot;,             \&quot;version\&quot;: \&quot;string\&quot;,           }         }       }     ]   } } &#x60;&#x60;&#x60;
     * @param body  (required)
     * @param target  (optional)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Notification notificationCreate(Notification body, String target) throws ApiException {
        ApiResponse<Notification> resp = notificationCreateWithHttpInfo(body, target);
        return resp.getData();
    }

    /**
     * NBI will send notification to this operation provided by subscribers
     * Notification structure depends of the eventType:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification  &#x60;&#x60;&#x60; {   \&quot;eventId\&quot;: \&quot;string\&quot;,   \&quot;eventDate\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;,   \&quot;eventType\&quot;: \&quot;string\&quot;,   \&quot;event\&quot;: {     \&quot;id\&quot;: \&quot;string\&quot;,     \&quot;href\&quot;: \&quot;string\&quot;,     \&quot;externalId\&quot;: \&quot;string\&quot;,     \&quot;state\&quot;: \&quot;acknowledged\&quot;,     \&quot;orderDate\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;,     \&quot;completionDateTime\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;   } } &#x60;&#x60;&#x60;  - ServiceOrderItemStateChangeNotification  &#x60;&#x60;&#x60; {   \&quot;eventId\&quot;: \&quot;string\&quot;,   \&quot;eventDate\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,   \&quot;eventType\&quot;: \&quot;string\&quot;,   \&quot;event\&quot;: {     \&quot;id\&quot;: \&quot;string\&quot;,     \&quot;href\&quot;: \&quot;string\&quot;,     \&quot;externalId\&quot;: \&quot;string\&quot;,     \&quot;state\&quot;: \&quot;acknowledged\&quot;,     \&quot;orderDate\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,     \&quot;completionDateTime\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,     \&quot;orderItem\&quot;: [       {         \&quot;id\&quot;: \&quot;string\&quot;,         \&quot;action\&quot;: \&quot;add\&quot;,         \&quot;state\&quot;: \&quot;acknowledged\&quot;,         \&quot;service\&quot;: {           \&quot;id\&quot;: \&quot;string\&quot;,           \&quot;href\&quot;: \&quot;string\&quot;,           \&quot;name\&quot;: \&quot;string\&quot;,           \&quot;serviceState\&quot;: \&quot;string\&quot;,           \&quot;serviceCharacteristic\&quot;: [             {               \&quot;name\&quot;: \&quot;string\&quot;,               \&quot;valueType\&quot;: \&quot;string\&quot;,               \&quot;value\&quot;: {                 \&quot;serviceCharacteristicValue\&quot;: \&quot;string\&quot;               }             }           ],           \&quot;serviceRelationship\&quot;: [             {               \&quot;type\&quot;: \&quot;reliesOn\&quot;             }           ],           \&quot;relatedParty\&quot;: [             {               \&quot;id\&quot;: \&quot;string\&quot;,               \&quot;href\&quot;: \&quot;string\&quot;,               \&quot;role\&quot;: \&quot;string\&quot;,               \&quot;name\&quot;: \&quot;string\&quot;,               \&quot;@referredType\&quot;: \&quot;string\&quot;             }           ],           \&quot;serviceSpecification\&quot;: {             \&quot;id\&quot;: \&quot;string\&quot;,             \&quot;href\&quot;: \&quot;string\&quot;,             \&quot;name\&quot;: \&quot;string\&quot;,             \&quot;version\&quot;: \&quot;string\&quot;,           }         }       }     ]   } } &#x60;&#x60;&#x60;
     * @param body  (required)
     * @param target  (optional)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Notification> notificationCreateWithHttpInfo(Notification body, String target) throws ApiException {
        com.squareup.okhttp.Call call = notificationCreateValidateBeforeCall(body, target, null, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * NBI will send notification to this operation provided by subscribers (asynchronously)
     * Notification structure depends of the eventType:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification  &#x60;&#x60;&#x60; {   \&quot;eventId\&quot;: \&quot;string\&quot;,   \&quot;eventDate\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;,   \&quot;eventType\&quot;: \&quot;string\&quot;,   \&quot;event\&quot;: {     \&quot;id\&quot;: \&quot;string\&quot;,     \&quot;href\&quot;: \&quot;string\&quot;,     \&quot;externalId\&quot;: \&quot;string\&quot;,     \&quot;state\&quot;: \&quot;acknowledged\&quot;,     \&quot;orderDate\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;,     \&quot;completionDateTime\&quot;: \&quot;2019-03-12T16:21:27.530Z\&quot;   } } &#x60;&#x60;&#x60;  - ServiceOrderItemStateChangeNotification  &#x60;&#x60;&#x60; {   \&quot;eventId\&quot;: \&quot;string\&quot;,   \&quot;eventDate\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,   \&quot;eventType\&quot;: \&quot;string\&quot;,   \&quot;event\&quot;: {     \&quot;id\&quot;: \&quot;string\&quot;,     \&quot;href\&quot;: \&quot;string\&quot;,     \&quot;externalId\&quot;: \&quot;string\&quot;,     \&quot;state\&quot;: \&quot;acknowledged\&quot;,     \&quot;orderDate\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,     \&quot;completionDateTime\&quot;: \&quot;2019-03-12T16:21:44.066Z\&quot;,     \&quot;orderItem\&quot;: [       {         \&quot;id\&quot;: \&quot;string\&quot;,         \&quot;action\&quot;: \&quot;add\&quot;,         \&quot;state\&quot;: \&quot;acknowledged\&quot;,         \&quot;service\&quot;: {           \&quot;id\&quot;: \&quot;string\&quot;,           \&quot;href\&quot;: \&quot;string\&quot;,           \&quot;name\&quot;: \&quot;string\&quot;,           \&quot;serviceState\&quot;: \&quot;string\&quot;,           \&quot;serviceCharacteristic\&quot;: [             {               \&quot;name\&quot;: \&quot;string\&quot;,               \&quot;valueType\&quot;: \&quot;string\&quot;,               \&quot;value\&quot;: {                 \&quot;serviceCharacteristicValue\&quot;: \&quot;string\&quot;               }             }           ],           \&quot;serviceRelationship\&quot;: [             {               \&quot;type\&quot;: \&quot;reliesOn\&quot;             }           ],           \&quot;relatedParty\&quot;: [             {               \&quot;id\&quot;: \&quot;string\&quot;,               \&quot;href\&quot;: \&quot;string\&quot;,               \&quot;role\&quot;: \&quot;string\&quot;,               \&quot;name\&quot;: \&quot;string\&quot;,               \&quot;@referredType\&quot;: \&quot;string\&quot;             }           ],           \&quot;serviceSpecification\&quot;: {             \&quot;id\&quot;: \&quot;string\&quot;,             \&quot;href\&quot;: \&quot;string\&quot;,             \&quot;name\&quot;: \&quot;string\&quot;,             \&quot;version\&quot;: \&quot;string\&quot;,           }         }       }     ]   } } &#x60;&#x60;&#x60;
     * @param body  (required)
     * @param target  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationCreateAsync(Notification body, String target, final ApiCallback<Notification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationCreateValidateBeforeCall(body, target, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
