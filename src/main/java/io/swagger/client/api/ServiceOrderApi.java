/*
 * API ServiceOrder
 * Request the instantiation of a service  A Service Order is a type of order which can be used to describe a group of operations on service â€“ one service order item per service. An action at the level of the service order item describe the operation to be done on a service (add, terminate for example). The service order is triggered from the BSS system in charge of the product order management to ONAP that will manage the service fulfillment.  List of available subscription for serviceOrdering notifications, see /hub resources for more information:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification - ServiceOrderItemStateChangeNotification  
 *
 * OpenAPI spec version: 4.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateServiceOrder;
import io.swagger.client.model.ServiceOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceOrderApi {
    private ApiClient apiClient;

    public ServiceOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceOrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for serviceOrderCreate
     * @param body  (required)
     * @param target  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceOrderCreateCall(CreateServiceOrder body, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/serviceOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (target != null)
        localVarHeaderParams.put("Target", apiClient.parameterToString(target));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceOrderCreateValidateBeforeCall(CreateServiceOrder body, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling serviceOrderCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceOrderCreateCall(body, target, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a service order
     * This operation creates a service order entity. The TMF Open API specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values. POST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.  In Beijing Release, NBI will use only POST {{url}}/ecomp/mso/infra/serviceInstances/v4 SO API. This mean that only the &#x27;service-instance&#x27; level will be created in AAI. Additional resource like VNF and/OR VF are not created.  In Casablanca release, NBI has been improved to also be able to use POST {{url}}/e2eServiceInstances/v3 SO API. This API is able to instantiate in ONAP E2E service; This is useful for CCVPN and VoLTE UC. Depending on the service category defined in SDC, NBI will use one or the other SO API. If category starts with e2e, NBI will use  {url}}/e2eServiceInstances/v3 SO API - else it will use {{url}}/ecomp/mso/infra/serviceInstances/v4 SO API.
     * @param body  (required)
     * @param target  (optional)
     * @return ServiceOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceOrder serviceOrderCreate(CreateServiceOrder body, String target) throws ApiException {
        ApiResponse<ServiceOrder> resp = serviceOrderCreateWithHttpInfo(body, target);
        return resp.getData();
    }

    /**
     * Create a service order
     * This operation creates a service order entity. The TMF Open API specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values. POST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.  In Beijing Release, NBI will use only POST {{url}}/ecomp/mso/infra/serviceInstances/v4 SO API. This mean that only the &#x27;service-instance&#x27; level will be created in AAI. Additional resource like VNF and/OR VF are not created.  In Casablanca release, NBI has been improved to also be able to use POST {{url}}/e2eServiceInstances/v3 SO API. This API is able to instantiate in ONAP E2E service; This is useful for CCVPN and VoLTE UC. Depending on the service category defined in SDC, NBI will use one or the other SO API. If category starts with e2e, NBI will use  {url}}/e2eServiceInstances/v3 SO API - else it will use {{url}}/ecomp/mso/infra/serviceInstances/v4 SO API.
     * @param body  (required)
     * @param target  (optional)
     * @return ApiResponse&lt;ServiceOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceOrder> serviceOrderCreateWithHttpInfo(CreateServiceOrder body, String target) throws ApiException {
        com.squareup.okhttp.Call call = serviceOrderCreateValidateBeforeCall(body, target, null, null);
        Type localVarReturnType = new TypeToken<ServiceOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a service order (asynchronously)
     * This operation creates a service order entity. The TMF Open API specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values. POST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.  In Beijing Release, NBI will use only POST {{url}}/ecomp/mso/infra/serviceInstances/v4 SO API. This mean that only the &#x27;service-instance&#x27; level will be created in AAI. Additional resource like VNF and/OR VF are not created.  In Casablanca release, NBI has been improved to also be able to use POST {{url}}/e2eServiceInstances/v3 SO API. This API is able to instantiate in ONAP E2E service; This is useful for CCVPN and VoLTE UC. Depending on the service category defined in SDC, NBI will use one or the other SO API. If category starts with e2e, NBI will use  {url}}/e2eServiceInstances/v3 SO API - else it will use {{url}}/ecomp/mso/infra/serviceInstances/v4 SO API.
     * @param body  (required)
     * @param target  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceOrderCreateAsync(CreateServiceOrder body, String target, final ApiCallback<ServiceOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceOrderCreateValidateBeforeCall(body, target, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceOrderFind
     * @param externalId  (optional)
     * @param state state of the order(s) to be retrieved (optional)
     * @param description  (optional)
     * @param orderDateGt order date greather than (optional)
     * @param orderDateLt order date lower than (optional)
     * @param fields this attribute could be used to filter retrieved attribute(s) and/or sort SO. (optional)
     * @param offset The index of the first element to retrieve. Zero is the first element of the collection. (optional)
     * @param limit The maximum number of elements to retrieve (it can be greater than the actual available number of items). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceOrderFindCall(String externalId, String state, String description, String orderDateGt, String orderDateLt, String fields, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("externalId", externalId));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (orderDateGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderDate.gt", orderDateGt));
        if (orderDateLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderDate.lt", orderDateLt));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceOrderFindValidateBeforeCall(String externalId, String state, String description, String orderDateGt, String orderDateLt, String fields, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = serviceOrderFindCall(externalId, state, description, orderDateGt, orderDateLt, fields, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List service orders
     * Retrieve and list service order entities according to given criteria. Only a predefined set of attribute is proposed. Attribute selection could be described in the fields attribute.
     * @param externalId  (optional)
     * @param state state of the order(s) to be retrieved (optional)
     * @param description  (optional)
     * @param orderDateGt order date greather than (optional)
     * @param orderDateLt order date lower than (optional)
     * @param fields this attribute could be used to filter retrieved attribute(s) and/or sort SO. (optional)
     * @param offset The index of the first element to retrieve. Zero is the first element of the collection. (optional)
     * @param limit The maximum number of elements to retrieve (it can be greater than the actual available number of items). (optional)
     * @return List&lt;ServiceOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ServiceOrder> serviceOrderFind(String externalId, String state, String description, String orderDateGt, String orderDateLt, String fields, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<ServiceOrder>> resp = serviceOrderFindWithHttpInfo(externalId, state, description, orderDateGt, orderDateLt, fields, offset, limit);
        return resp.getData();
    }

    /**
     * List service orders
     * Retrieve and list service order entities according to given criteria. Only a predefined set of attribute is proposed. Attribute selection could be described in the fields attribute.
     * @param externalId  (optional)
     * @param state state of the order(s) to be retrieved (optional)
     * @param description  (optional)
     * @param orderDateGt order date greather than (optional)
     * @param orderDateLt order date lower than (optional)
     * @param fields this attribute could be used to filter retrieved attribute(s) and/or sort SO. (optional)
     * @param offset The index of the first element to retrieve. Zero is the first element of the collection. (optional)
     * @param limit The maximum number of elements to retrieve (it can be greater than the actual available number of items). (optional)
     * @return ApiResponse&lt;List&lt;ServiceOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ServiceOrder>> serviceOrderFindWithHttpInfo(String externalId, String state, String description, String orderDateGt, String orderDateLt, String fields, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = serviceOrderFindValidateBeforeCall(externalId, state, description, orderDateGt, orderDateLt, fields, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<ServiceOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List service orders (asynchronously)
     * Retrieve and list service order entities according to given criteria. Only a predefined set of attribute is proposed. Attribute selection could be described in the fields attribute.
     * @param externalId  (optional)
     * @param state state of the order(s) to be retrieved (optional)
     * @param description  (optional)
     * @param orderDateGt order date greather than (optional)
     * @param orderDateLt order date lower than (optional)
     * @param fields this attribute could be used to filter retrieved attribute(s) and/or sort SO. (optional)
     * @param offset The index of the first element to retrieve. Zero is the first element of the collection. (optional)
     * @param limit The maximum number of elements to retrieve (it can be greater than the actual available number of items). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceOrderFindAsync(String externalId, String state, String description, String orderDateGt, String orderDateLt, String fields, Integer offset, Integer limit, final ApiCallback<List<ServiceOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceOrderFindValidateBeforeCall(externalId, state, description, orderDateGt, orderDateLt, fields, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServiceOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceOrderGet
     * @param id  (required)
     * @param fields Attribute selection (optional)
     * @param target  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceOrderGetCall(String id, String fields, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/serviceOrder/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (target != null)
        localVarHeaderParams.put("Target", apiClient.parameterToString(target));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceOrderGetValidateBeforeCall(String id, String fields, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling serviceOrderGet(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceOrderGetCall(id, fields, target, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a service order
     * This operation retrieves a service order entity.  Attribute selection is enabled for all first level attributes.
     * @param id  (required)
     * @param fields Attribute selection (optional)
     * @param target  (optional)
     * @return ServiceOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceOrder serviceOrderGet(String id, String fields, String target) throws ApiException {
        ApiResponse<ServiceOrder> resp = serviceOrderGetWithHttpInfo(id, fields, target);
        return resp.getData();
    }

    /**
     * Retrieve a service order
     * This operation retrieves a service order entity.  Attribute selection is enabled for all first level attributes.
     * @param id  (required)
     * @param fields Attribute selection (optional)
     * @param target  (optional)
     * @return ApiResponse&lt;ServiceOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceOrder> serviceOrderGetWithHttpInfo(String id, String fields, String target) throws ApiException {
        com.squareup.okhttp.Call call = serviceOrderGetValidateBeforeCall(id, fields, target, null, null);
        Type localVarReturnType = new TypeToken<ServiceOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a service order (asynchronously)
     * This operation retrieves a service order entity.  Attribute selection is enabled for all first level attributes.
     * @param id  (required)
     * @param fields Attribute selection (optional)
     * @param target  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceOrderGetAsync(String id, String fields, String target, final ApiCallback<ServiceOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceOrderGetValidateBeforeCall(id, fields, target, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
