/*
 * API ServiceOrder
 * Request the instantiation of a service  A Service Order is a type of order which can be used to describe a group of operations on service – one service order item per service. An action at the level of the service order item describe the operation to be done on a service (add, terminate for example). The service order is triggered from the BSS system in charge of the product order management to ONAP that will manage the service fulfillment.  List of available subscription for serviceOrdering notifications, see /hub resources for more information:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification - ServiceOrderItemStateChangeNotification  
 *
 * OpenAPI spec version: 4.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CreateServiceOrderItem;
import io.swagger.client.model.OrderRelationship;
import io.swagger.client.model.RelatedParty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * This structure is used in the operation POST for a serviceOrder request. Attribute description is not accurate and should be find in the serviceOrder class.
 */
@Schema(description = "This structure is used in the operation POST for a serviceOrder request. Attribute description is not accurate and should be find in the serviceOrder class.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-22T18:40:19.698152-04:00[America/Toronto]")
public class CreateServiceOrder {
  @SerializedName("externalId")
  private String externalId = null;

  @SerializedName("priority")
  private String priority = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("category")
  private String category = null;

  @SerializedName("requestedStartDate")
  private OffsetDateTime requestedStartDate = null;

  @SerializedName("requestedCompletionDate")
  private OffsetDateTime requestedCompletionDate = null;

  @SerializedName("relatedParty")
  private List<RelatedParty> relatedParty = null;

  @SerializedName("orderRelationship")
  private List<OrderRelationship> orderRelationship = null;

  @SerializedName("orderItem")
  private List<CreateServiceOrderItem> orderItem = null;

  public CreateServiceOrder externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * ID given by the consumer and only understandable by him (to facilitate his searches)
   * @return externalId
  **/
  @Schema(description = "ID given by the consumer and only understandable by him (to facilitate his searches)")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public CreateServiceOrder priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)
   * @return priority
  **/
  @Schema(description = "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)")
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }

  public CreateServiceOrder description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A free-text description of the service order
   * @return description
  **/
  @Schema(description = "A free-text description of the service order")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateServiceOrder category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Used to categorize the order that can be useful for the OM system (e.g. “broadband”, “TVOption”, ...)
   * @return category
  **/
  @Schema(description = "Used to categorize the order that can be useful for the OM system (e.g. “broadband”, “TVOption”, ...)")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public CreateServiceOrder requestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
    return this;
  }

   /**
   * Order start date wished by the requestor
   * @return requestedStartDate
  **/
  @Schema(description = "Order start date wished by the requestor")
  public OffsetDateTime getRequestedStartDate() {
    return requestedStartDate;
  }

  public void setRequestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
  }

  public CreateServiceOrder requestedCompletionDate(OffsetDateTime requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
    return this;
  }

   /**
   * Requested delivery date from the requestor perspective
   * @return requestedCompletionDate
  **/
  @Schema(description = "Requested delivery date from the requestor perspective")
  public OffsetDateTime getRequestedCompletionDate() {
    return requestedCompletionDate;
  }

  public void setRequestedCompletionDate(OffsetDateTime requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
  }

  public CreateServiceOrder relatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public CreateServiceOrder addRelatedPartyItem(RelatedParty relatedPartyItem) {
    if (this.relatedParty == null) {
      this.relatedParty = new ArrayList<RelatedParty>();
    }
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

   /**
   * Get relatedParty
   * @return relatedParty
  **/
  @Schema(description = "")
  public List<RelatedParty> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
  }

  public CreateServiceOrder orderRelationship(List<OrderRelationship> orderRelationship) {
    this.orderRelationship = orderRelationship;
    return this;
  }

  public CreateServiceOrder addOrderRelationshipItem(OrderRelationship orderRelationshipItem) {
    if (this.orderRelationship == null) {
      this.orderRelationship = new ArrayList<OrderRelationship>();
    }
    this.orderRelationship.add(orderRelationshipItem);
    return this;
  }

   /**
   * Get orderRelationship
   * @return orderRelationship
  **/
  @Schema(description = "")
  public List<OrderRelationship> getOrderRelationship() {
    return orderRelationship;
  }

  public void setOrderRelationship(List<OrderRelationship> orderRelationship) {
    this.orderRelationship = orderRelationship;
  }

  public CreateServiceOrder orderItem(List<CreateServiceOrderItem> orderItem) {
    this.orderItem = orderItem;
    return this;
  }

  public CreateServiceOrder addOrderItemItem(CreateServiceOrderItem orderItemItem) {
    if (this.orderItem == null) {
      this.orderItem = new ArrayList<CreateServiceOrderItem>();
    }
    this.orderItem.add(orderItemItem);
    return this;
  }

   /**
   * Get orderItem
   * @return orderItem
  **/
  @Schema(description = "")
  public List<CreateServiceOrderItem> getOrderItem() {
    return orderItem;
  }

  public void setOrderItem(List<CreateServiceOrderItem> orderItem) {
    this.orderItem = orderItem;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceOrder createServiceOrder = (CreateServiceOrder) o;
    return Objects.equals(this.externalId, createServiceOrder.externalId) &&
        Objects.equals(this.priority, createServiceOrder.priority) &&
        Objects.equals(this.description, createServiceOrder.description) &&
        Objects.equals(this.category, createServiceOrder.category) &&
        Objects.equals(this.requestedStartDate, createServiceOrder.requestedStartDate) &&
        Objects.equals(this.requestedCompletionDate, createServiceOrder.requestedCompletionDate) &&
        Objects.equals(this.relatedParty, createServiceOrder.relatedParty) &&
        Objects.equals(this.orderRelationship, createServiceOrder.orderRelationship) &&
        Objects.equals(this.orderItem, createServiceOrder.orderItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalId, priority, description, category, requestedStartDate, requestedCompletionDate, relatedParty, orderRelationship, orderItem);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceOrder {\n");
    
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    requestedStartDate: ").append(toIndentedString(requestedStartDate)).append("\n");
    sb.append("    requestedCompletionDate: ").append(toIndentedString(requestedCompletionDate)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    orderRelationship: ").append(toIndentedString(orderRelationship)).append("\n");
    sb.append("    orderItem: ").append(toIndentedString(orderItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
