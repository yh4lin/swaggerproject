/*
 * API ServiceOrder
 * Request the instantiation of a service  A Service Order is a type of order which can be used to describe a group of operations on service – one service order item per service. An action at the level of the service order item describe the operation to be done on a service (add, terminate for example). The service order is triggered from the BSS system in charge of the product order management to ONAP that will manage the service fulfillment.  List of available subscription for serviceOrdering notifications, see /hub resources for more information:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification - ServiceOrderItemStateChangeNotification  
 *
 * OpenAPI spec version: 4.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.OrderMessage;
import io.swagger.client.model.OrderRelationship;
import io.swagger.client.model.RelatedParty;
import io.swagger.client.model.ServiceOrderItem;
import io.swagger.client.model.StateType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * A Service Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa
 */
@Schema(description = "A Service Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-22T18:40:19.698152-04:00[America/Toronto]")
public class ServiceOrder {
  @SerializedName("id")
  private String id = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("externalId")
  private String externalId = null;

  @SerializedName("priority")
  private String priority = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("category")
  private String category = null;

  @SerializedName("state")
  private StateType state = null;

  @SerializedName("orderDate")
  private OffsetDateTime orderDate = null;

  @SerializedName("completionDateTime")
  private OffsetDateTime completionDateTime = null;

  @SerializedName("requestedStartDate")
  private OffsetDateTime requestedStartDate = null;

  @SerializedName("requestedCompletionDate")
  private OffsetDateTime requestedCompletionDate = null;

  @SerializedName("expectedCompletionDate")
  private OffsetDateTime expectedCompletionDate = null;

  @SerializedName("startDate")
  private OffsetDateTime startDate = null;

  @SerializedName("@baseType")
  private String _atBaseType = null;

  @SerializedName("@type")
  private String _atType = null;

  @SerializedName("@schemaLocation")
  private String _atSchemaLocation = null;

  @SerializedName("relatedParty")
  private List<RelatedParty> relatedParty = null;

  @SerializedName("orderRelationship")
  private List<OrderRelationship> orderRelationship = null;

  @SerializedName("orderItem")
  private List<ServiceOrderItem> orderItem = null;

  @SerializedName("orderMessage")
  private List<OrderMessage> orderMessage = null;

  public ServiceOrder id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID created on repository side
   * @return id
  **/
  @Schema(required = true, description = "ID created on repository side")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ServiceOrder href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Hyperlink to access the order
   * @return href
  **/
  @Schema(description = "Hyperlink to access the order")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public ServiceOrder externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * ID given by the consumer and only understandable by him (to facilitate his searches)
   * @return externalId
  **/
  @Schema(description = "ID given by the consumer and only understandable by him (to facilitate his searches)")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public ServiceOrder priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)
   * @return priority
  **/
  @Schema(description = "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)")
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }

  public ServiceOrder description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A free-text description of the service order
   * @return description
  **/
  @Schema(description = "A free-text description of the service order")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ServiceOrder category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Used to categorize the order that can be useful for the OM system (e.g. “broadband”, “TVOption”, ...)
   * @return category
  **/
  @Schema(description = "Used to categorize the order that can be useful for the OM system (e.g. “broadband”, “TVOption”, ...)")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public ServiceOrder state(StateType state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateType getState() {
    return state;
  }

  public void setState(StateType state) {
    this.state = state;
  }

  public ServiceOrder orderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Get orderDate
   * @return orderDate
  **/
  @Schema(description = "")
  public OffsetDateTime getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
  }

  public ServiceOrder completionDateTime(OffsetDateTime completionDateTime) {
    this.completionDateTime = completionDateTime;
    return this;
  }

   /**
   * Date when the order was completed
   * @return completionDateTime
  **/
  @Schema(description = "Date when the order was completed")
  public OffsetDateTime getCompletionDateTime() {
    return completionDateTime;
  }

  public void setCompletionDateTime(OffsetDateTime completionDateTime) {
    this.completionDateTime = completionDateTime;
  }

  public ServiceOrder requestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
    return this;
  }

   /**
   * Order start date wished by the requestor
   * @return requestedStartDate
  **/
  @Schema(description = "Order start date wished by the requestor")
  public OffsetDateTime getRequestedStartDate() {
    return requestedStartDate;
  }

  public void setRequestedStartDate(OffsetDateTime requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
  }

  public ServiceOrder requestedCompletionDate(OffsetDateTime requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
    return this;
  }

   /**
   * Requested delivery date from the requestor perspective
   * @return requestedCompletionDate
  **/
  @Schema(description = "Requested delivery date from the requestor perspective")
  public OffsetDateTime getRequestedCompletionDate() {
    return requestedCompletionDate;
  }

  public void setRequestedCompletionDate(OffsetDateTime requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
  }

  public ServiceOrder expectedCompletionDate(OffsetDateTime expectedCompletionDate) {
    this.expectedCompletionDate = expectedCompletionDate;
    return this;
  }

   /**
   * Get expectedCompletionDate
   * @return expectedCompletionDate
  **/
  @Schema(description = "")
  public OffsetDateTime getExpectedCompletionDate() {
    return expectedCompletionDate;
  }

  public void setExpectedCompletionDate(OffsetDateTime expectedCompletionDate) {
    this.expectedCompletionDate = expectedCompletionDate;
  }

  public ServiceOrder startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Date when the order was started for processing
   * @return startDate
  **/
  @Schema(description = "Date when the order was started for processing")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public ServiceOrder _atBaseType(String _atBaseType) {
    this._atBaseType = _atBaseType;
    return this;
  }

   /**
   * Get _atBaseType
   * @return _atBaseType
  **/
  @Schema(description = "")
  public String getAtBaseType() {
    return _atBaseType;
  }

  public void setAtBaseType(String _atBaseType) {
    this._atBaseType = _atBaseType;
  }

  public ServiceOrder _atType(String _atType) {
    this._atType = _atType;
    return this;
  }

   /**
   * Get _atType
   * @return _atType
  **/
  @Schema(description = "")
  public String getAtType() {
    return _atType;
  }

  public void setAtType(String _atType) {
    this._atType = _atType;
  }

  public ServiceOrder _atSchemaLocation(String _atSchemaLocation) {
    this._atSchemaLocation = _atSchemaLocation;
    return this;
  }

   /**
   * Get _atSchemaLocation
   * @return _atSchemaLocation
  **/
  @Schema(description = "")
  public String getAtSchemaLocation() {
    return _atSchemaLocation;
  }

  public void setAtSchemaLocation(String _atSchemaLocation) {
    this._atSchemaLocation = _atSchemaLocation;
  }

  public ServiceOrder relatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public ServiceOrder addRelatedPartyItem(RelatedParty relatedPartyItem) {
    if (this.relatedParty == null) {
      this.relatedParty = new ArrayList<RelatedParty>();
    }
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

   /**
   * Get relatedParty
   * @return relatedParty
  **/
  @Schema(description = "")
  public List<RelatedParty> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
  }

  public ServiceOrder orderRelationship(List<OrderRelationship> orderRelationship) {
    this.orderRelationship = orderRelationship;
    return this;
  }

  public ServiceOrder addOrderRelationshipItem(OrderRelationship orderRelationshipItem) {
    if (this.orderRelationship == null) {
      this.orderRelationship = new ArrayList<OrderRelationship>();
    }
    this.orderRelationship.add(orderRelationshipItem);
    return this;
  }

   /**
   * Get orderRelationship
   * @return orderRelationship
  **/
  @Schema(description = "")
  public List<OrderRelationship> getOrderRelationship() {
    return orderRelationship;
  }

  public void setOrderRelationship(List<OrderRelationship> orderRelationship) {
    this.orderRelationship = orderRelationship;
  }

  public ServiceOrder orderItem(List<ServiceOrderItem> orderItem) {
    this.orderItem = orderItem;
    return this;
  }

  public ServiceOrder addOrderItemItem(ServiceOrderItem orderItemItem) {
    if (this.orderItem == null) {
      this.orderItem = new ArrayList<ServiceOrderItem>();
    }
    this.orderItem.add(orderItemItem);
    return this;
  }

   /**
   * Get orderItem
   * @return orderItem
  **/
  @Schema(description = "")
  public List<ServiceOrderItem> getOrderItem() {
    return orderItem;
  }

  public void setOrderItem(List<ServiceOrderItem> orderItem) {
    this.orderItem = orderItem;
  }

  public ServiceOrder orderMessage(List<OrderMessage> orderMessage) {
    this.orderMessage = orderMessage;
    return this;
  }

  public ServiceOrder addOrderMessageItem(OrderMessage orderMessageItem) {
    if (this.orderMessage == null) {
      this.orderMessage = new ArrayList<OrderMessage>();
    }
    this.orderMessage.add(orderMessageItem);
    return this;
  }

   /**
   * Get orderMessage
   * @return orderMessage
  **/
  @Schema(description = "")
  public List<OrderMessage> getOrderMessage() {
    return orderMessage;
  }

  public void setOrderMessage(List<OrderMessage> orderMessage) {
    this.orderMessage = orderMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceOrder serviceOrder = (ServiceOrder) o;
    return Objects.equals(this.id, serviceOrder.id) &&
        Objects.equals(this.href, serviceOrder.href) &&
        Objects.equals(this.externalId, serviceOrder.externalId) &&
        Objects.equals(this.priority, serviceOrder.priority) &&
        Objects.equals(this.description, serviceOrder.description) &&
        Objects.equals(this.category, serviceOrder.category) &&
        Objects.equals(this.state, serviceOrder.state) &&
        Objects.equals(this.orderDate, serviceOrder.orderDate) &&
        Objects.equals(this.completionDateTime, serviceOrder.completionDateTime) &&
        Objects.equals(this.requestedStartDate, serviceOrder.requestedStartDate) &&
        Objects.equals(this.requestedCompletionDate, serviceOrder.requestedCompletionDate) &&
        Objects.equals(this.expectedCompletionDate, serviceOrder.expectedCompletionDate) &&
        Objects.equals(this.startDate, serviceOrder.startDate) &&
        Objects.equals(this._atBaseType, serviceOrder._atBaseType) &&
        Objects.equals(this._atType, serviceOrder._atType) &&
        Objects.equals(this._atSchemaLocation, serviceOrder._atSchemaLocation) &&
        Objects.equals(this.relatedParty, serviceOrder.relatedParty) &&
        Objects.equals(this.orderRelationship, serviceOrder.orderRelationship) &&
        Objects.equals(this.orderItem, serviceOrder.orderItem) &&
        Objects.equals(this.orderMessage, serviceOrder.orderMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, externalId, priority, description, category, state, orderDate, completionDateTime, requestedStartDate, requestedCompletionDate, expectedCompletionDate, startDate, _atBaseType, _atType, _atSchemaLocation, relatedParty, orderRelationship, orderItem, orderMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceOrder {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    completionDateTime: ").append(toIndentedString(completionDateTime)).append("\n");
    sb.append("    requestedStartDate: ").append(toIndentedString(requestedStartDate)).append("\n");
    sb.append("    requestedCompletionDate: ").append(toIndentedString(requestedCompletionDate)).append("\n");
    sb.append("    expectedCompletionDate: ").append(toIndentedString(expectedCompletionDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    _atBaseType: ").append(toIndentedString(_atBaseType)).append("\n");
    sb.append("    _atType: ").append(toIndentedString(_atType)).append("\n");
    sb.append("    _atSchemaLocation: ").append(toIndentedString(_atSchemaLocation)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    orderRelationship: ").append(toIndentedString(orderRelationship)).append("\n");
    sb.append("    orderItem: ").append(toIndentedString(orderItem)).append("\n");
    sb.append("    orderMessage: ").append(toIndentedString(orderMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
