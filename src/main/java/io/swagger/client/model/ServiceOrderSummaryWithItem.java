/*
 * API ServiceOrder
 * Request the instantiation of a service  A Service Order is a type of order which can be used to describe a group of operations on service â€“ one service order item per service. An action at the level of the service order item describe the operation to be done on a service (add, terminate for example). The service order is triggered from the BSS system in charge of the product order management to ONAP that will manage the service fulfillment.  List of available subscription for serviceOrdering notifications, see /hub resources for more information:  - ServiceOrderCreationNotification - ServiceOrderStateChangeNotification - ServiceOrderItemStateChangeNotification  
 *
 * OpenAPI spec version: 4.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ServiceOrderItemSummary;
import io.swagger.client.model.StateType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Service order item summary with item description
 */
@Schema(description = "Service order item summary with item description")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-22T18:40:19.698152-04:00[America/Toronto]")
public class ServiceOrderSummaryWithItem {
  @SerializedName("id")
  private String id = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("externalId")
  private String externalId = null;

  @SerializedName("state")
  private StateType state = null;

  @SerializedName("orderDate")
  private OffsetDateTime orderDate = null;

  @SerializedName("completionDateTime")
  private OffsetDateTime completionDateTime = null;

  @SerializedName("orderItem")
  private List<ServiceOrderItemSummary> orderItem = null;

  public ServiceOrderSummaryWithItem id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID created on repository side
   * @return id
  **/
  @Schema(required = true, description = "ID created on repository side")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ServiceOrderSummaryWithItem href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Hyperlink to access the order
   * @return href
  **/
  @Schema(description = "Hyperlink to access the order")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public ServiceOrderSummaryWithItem externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * ID given by the consumer and only understandable by him (to facilitate his searches)
   * @return externalId
  **/
  @Schema(description = "ID given by the consumer and only understandable by him (to facilitate his searches)")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public ServiceOrderSummaryWithItem state(StateType state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateType getState() {
    return state;
  }

  public void setState(StateType state) {
    this.state = state;
  }

  public ServiceOrderSummaryWithItem orderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Get orderDate
   * @return orderDate
  **/
  @Schema(description = "")
  public OffsetDateTime getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
  }

  public ServiceOrderSummaryWithItem completionDateTime(OffsetDateTime completionDateTime) {
    this.completionDateTime = completionDateTime;
    return this;
  }

   /**
   * Date when the order was completed
   * @return completionDateTime
  **/
  @Schema(description = "Date when the order was completed")
  public OffsetDateTime getCompletionDateTime() {
    return completionDateTime;
  }

  public void setCompletionDateTime(OffsetDateTime completionDateTime) {
    this.completionDateTime = completionDateTime;
  }

  public ServiceOrderSummaryWithItem orderItem(List<ServiceOrderItemSummary> orderItem) {
    this.orderItem = orderItem;
    return this;
  }

  public ServiceOrderSummaryWithItem addOrderItemItem(ServiceOrderItemSummary orderItemItem) {
    if (this.orderItem == null) {
      this.orderItem = new ArrayList<ServiceOrderItemSummary>();
    }
    this.orderItem.add(orderItemItem);
    return this;
  }

   /**
   * Get orderItem
   * @return orderItem
  **/
  @Schema(description = "")
  public List<ServiceOrderItemSummary> getOrderItem() {
    return orderItem;
  }

  public void setOrderItem(List<ServiceOrderItemSummary> orderItem) {
    this.orderItem = orderItem;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceOrderSummaryWithItem serviceOrderSummaryWithItem = (ServiceOrderSummaryWithItem) o;
    return Objects.equals(this.id, serviceOrderSummaryWithItem.id) &&
        Objects.equals(this.href, serviceOrderSummaryWithItem.href) &&
        Objects.equals(this.externalId, serviceOrderSummaryWithItem.externalId) &&
        Objects.equals(this.state, serviceOrderSummaryWithItem.state) &&
        Objects.equals(this.orderDate, serviceOrderSummaryWithItem.orderDate) &&
        Objects.equals(this.completionDateTime, serviceOrderSummaryWithItem.completionDateTime) &&
        Objects.equals(this.orderItem, serviceOrderSummaryWithItem.orderItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, externalId, state, orderDate, completionDateTime, orderItem);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceOrderSummaryWithItem {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    completionDateTime: ").append(toIndentedString(completionDateTime)).append("\n");
    sb.append("    orderItem: ").append(toIndentedString(orderItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
